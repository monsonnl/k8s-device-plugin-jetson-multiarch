From cac394bec82cc70fde027e69472d01332893ede9 Mon Sep 17 00:00:00 2001
From: Pablo Rodriguez <pablo.rodriguez-quesada@windriver.com>
Date: Wed, 25 Mar 2020 16:49:46 +0000
Subject: [PATCH 3/3] main: Add support for tegra boards

NVML does not have support for Tegra boards.
The initial check for this library was removed as it is not needed by
Tegra boards, a much easier process can replace this library.
A info message is printed in stdout so that we know is a Tegra board.

Signed-off-by: Pablo Rodriguez <pablo.rodriguez-quesada@windriver.com>
---
 main.go | 23 +++++++++++++----------
 1 file changed, 13 insertions(+), 10 deletions(-)

diff --git a/main.go b/main.go
index f84bda85..0de1bbf4 100644
--- a/main.go
+++ b/main.go
@@ -40,17 +40,20 @@ func getAllPlugins() []*NvidiaDevicePlugin {
 func main() {
 	flag.Parse()
 
-	log.Println("Loading NVML")
-	if err := nvml.Init(); err != nil {
-		log.Printf("Failed to initialize NVML: %s.", err)
-		log.Printf("If this is a GPU node, did you set the docker default runtime to `nvidia`?")
-		log.Printf("You can check the prerequisites at: https://github.com/NVIDIA/k8s-device-plugin#prerequisites")
-		log.Printf("You can learn how to set the runtime at: https://github.com/NVIDIA/k8s-device-plugin#quick-start")
-
-		select {}
-	}
-	defer func() { log.Println("Shutdown of NVML returned:", nvml.Shutdown()) }()
+	if _, err := os.Stat("/sys/module/tegra_fuse/parameters/tegra_chip_id"); !os.IsNotExist(err) {
+                log.Printf("NVIDIA Tegra device detected!")
+        } else {
+		log.Println("Loading NVML")
+		if err := nvml.Init(); err != nil {
+			log.Printf("Failed to initialize NVML: %s.", err)
+			log.Printf("If this is a GPU node, did you set the docker default runtime to `nvidia`?")
+			log.Printf("You can check the prerequisites at: https://github.com/NVIDIA/k8s-device-plugin#prerequisites")
+			log.Printf("You can learn how to set the runtime at: https://github.com/NVIDIA/k8s-device-plugin#quick-start")
 
+			select {}
+		}
+		defer func() { log.Println("Shutdown of NVML returned:", nvml.Shutdown()) }()
+	}
 	log.Println("Starting FS watcher.")
 	watcher, err := newFSWatcher(pluginapi.DevicePluginPath)
 	if err != nil {
-- 
2.17.1

